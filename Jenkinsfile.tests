pipeline {
    environment {
      branchname =  env.BRANCH_NAME.toLowerCase()
      kubeconfig = getKubeconf(env.branchname)
      registryCredential = 'jenkins_registry'
    }

    agent { kubernetes {
                  label 'python310'
                  defaultContainer 'python310'
                }
              }

    options {
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }

    stages {

        stage('CheckOut') {
            steps { checkout scm }
        }

        stage('Testes') {
            when {
              expression { return env.BRANCH_NAME.startsWith("bug") || env.BRANCH_NAME.startsWith("bugfix") || env.BRANCH_NAME.startsWith("feature") || env.BRANCH_NAME.startsWith("fix") || env.BRANCH_NAME.startsWith("releases") || env.BRANCH_NAME.startsWith("hotfix") }
            }
          steps {
             checkout scm
         sh 'env'
         sh 'pip install psycopg2-binary'
         sh 'pip install xlsxwriter'
         sh 'pip install pycparser'
         sh 'pip install --no-cache-dir -U pip'
         sh 'pip install --no-cache-dir pipenv==2023.11.15'
         sh 'pip install --user pipenv==2023.11.15'
         sh 'pipenv install --dev'
         sh 'pipenv run flake8'
         sh 'pipenv run pytest'
           }
        }
    }

  post {
    always { cleanWs notFailBuild: true }
    success { sendTelegram("ðŸš€ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}console") }
    unstable { sendTelegram("ðŸ’£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}console") }
    failure { sendTelegram("ðŸ’¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}console") }
    aborted { sendTelegram ("ðŸ˜¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console") }
  }
}
def sendTelegram(message) {
    def encodedMessage = URLEncoder.encode(message, "UTF-8")
    withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'),
    string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
        response = httpRequest (consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&disable_web_page_preview=true',
                validResponseCodes: '200')
        return response
    }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prd"; }
    else if ("master".equals(branchName)) { return "config_prd"; }
    else if ("homolog".equals(branchName)) { return "config_hom"; }
    else if ("release".equals(branchName)) { return "config_hom"; }
    else if ("development".equals(branchName)) { return "config_release"; }
}
