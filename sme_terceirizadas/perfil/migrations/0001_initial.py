# Generated by Django 2.2.6 on 2019-12-05 21:15

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_prometheus.models
import simple_email_confirmation.models
from django.conf import settings
from django.db import migrations, models

import sme_terceirizadas.perfil.models.usuario


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("nome", models.CharField(max_length=150, verbose_name="name")),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "tipo_email",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "@sme.prefeitura.sp.gov.br"),
                            (1, "@prefeitura.sp.gov.br"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        max_length=11,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(11)],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "registro_funcional",
                    models.CharField(
                        max_length=7,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(7)],
                        verbose_name="RF",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário",
                "verbose_name_plural": "Usuários",
                "abstract": False,
            },
            managers=[
                (
                    "objects",
                    sme_terceirizadas.perfil.models.usuario.CustomUserManager(),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Perfil",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("descricao", models.TextField(blank=True, verbose_name="Descricao")),
                (
                    "nome",
                    models.CharField(blank=True, max_length=100, verbose_name="Nome"),
                ),
                (
                    "ativo",
                    models.BooleanField(default=True, verbose_name="Está ativo?"),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "super_usuario",
                    models.BooleanField(
                        default=False, verbose_name="Super usuario na instiuição?"
                    ),
                ),
            ],
            options={
                "verbose_name": "Perfil",
                "verbose_name_plural": "Perfis",
            },
        ),
        migrations.CreateModel(
            name="Vinculo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ativo",
                    models.BooleanField(default=True, verbose_name="Está ativo?"),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "data_inicial",
                    models.DateField(
                        blank=True, null=True, verbose_name="Data inicial"
                    ),
                ),
                (
                    "data_final",
                    models.DateField(blank=True, null=True, verbose_name="Data final"),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to=models.Q(
                            models.Q(("app_label", "escola"), ("model", "escola")),
                            models.Q(
                                ("app_label", "escola"), ("model", "diretoriaregional")
                            ),
                            models.Q(("app_label", "escola"), ("model", "codae")),
                            models.Q(
                                ("app_label", "terceirizada"), ("model", "terceirizada")
                            ),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
                (
                    "perfil",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="perfil.Perfil"
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vinculos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Vínculo",
                "verbose_name_plural": "Vínculos",
            },
        ),
    ]
